#include<iostream>
using namespace std;

class Node {
public:
    int data;
    Node* prev;
    Node* next;

    Node(int d) {
        data = d;
        prev = NULL;
        next = NULL;
    }
};

void print(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

void insertAtTail(Node* &head, Node* &tail, int d) {
    Node* newNode = new Node(d);
    if (tail == NULL) {
        head = newNode;
        tail = newNode;
    } else {
        tail->next = newNode;
        newNode->prev = tail;
        tail = newNode;
    }
}


void insertAtHead(Node* &head, Node* &tail, int d) {
    Node* newNode = new Node(d);
    if (head == NULL) {
        head = newNode;
        tail = newNode;
    } else {
        newNode->next = head;
        head->prev = newNode;
        head = newNode;
    }
}

void deleteNode(int position, Node* &head, Node* &tail) {
    if (position == 1) {
        Node* temp = head;
        head = head->next;
        if (head != NULL) head->prev = NULL;
        else tail = NULL;
        delete temp;
    } else {
        Node* curr = head;
        int count = 1;

        while (count < position && curr != NULL) {
            curr = curr->next;
            count++;
        }

        if (curr == NULL) return;

        if (curr->prev != NULL)
            curr->prev->next = curr->next;

        if (curr->next != NULL)
            curr->next->prev = curr->prev;
        else
            tail = curr->prev;

        delete curr;
    }
}

int main() {
    Node* head = NULL;
    Node* tail = NULL;

    insertAtTail(head, tail, 10);  
    insertAtHead(head, tail, 20);  
    insertAtTail(head, tail, 30);   
    insertAtTail(head, tail, 40);  

    cout << "Train: ";
    print(head);

    deleteNode(2, head, tail);

    cout << "After removing position 2: ";
    print(head); 

    deleteNode(1, head, tail);  

    cout << "After removing position 1: ";
    print(head); 

    deleteNode(2, head, tail);  

    cout << "After removing position 2: ";
    print(head); 

    return 0;
}
