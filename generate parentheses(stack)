#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    void solve(int open, int close, string current, int n, vector<string>& result) {
        
        if (current.length() == 2 * n) {
            result.push_back(current);
            return;
        }

        
        if (open < n) {
            solve(open + 1, close, current + "(", n, result);
        }

    
        if (close < open) {
            solve(open, close + 1, current + ")", n, result);
        }
    }

    vector<string> generateParenthesis(int n) {
        vector<string> result;
        solve(0, 0, "", n, result);
        return result;
    }
};

int main() {
    Solution s;
    int n = 3;
    vector<string> ans = s.generateParenthesis(n);

    cout << "All valid parentheses combinations for n = " << n << ":\n";
    for (auto str : ans) {
        cout << str << endl;
    }
    return 0;
}
