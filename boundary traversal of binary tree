#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int val) : data(val), left(NULL), right(NULL) {}
};

bool isLeaf(Node* node) {
    return (node->left == NULL && node->right == NULL);
}

vector<int> boundaryTraversal(Node* root) {
    vector<int> res;
    if (!root) return res;

    if (!isLeaf(root)) res.push_back(root->data);

    Node* cur = root->left;
    while (cur) {
        if (!isLeaf(cur)) res.push_back(cur->data);
        cur = (cur->left) ? cur->left : cur->right;
    }


    function<void(Node*)> addLeaves = [&](Node* node) {
        if (!node) return;
        if (isLeaf(node)) {
            res.push_back(node->data);
            return;
        }
        addLeaves(node->left);
        addLeaves(node->right);
    };
    addLeaves(root);

    vector<int> tmp;
    cur = root->right;
    while (cur) {
        if (!isLeaf(cur)) tmp.push_back(cur->data);
        cur = (cur->right) ? cur->right : cur->left;
    }
    reverse(tmp.begin(), tmp.end());
    res.insert(res.end(), tmp.begin(), tmp.end());

    return res;
}

int main() {

    Node* root = new Node(1);
    root->left = new Node(2);
    root->left->left = new Node(3);
    root->left->right = new Node(4);
    root->right = new Node(5);
    root->right->left = new Node(6);
    root->right->right = new Node(7);
    root->right->right->right = new Node(8);

    vector<int> ans = boundaryTraversal(root);
    for (int x : ans) cout << x << " ";
    return 0;
}
