#include<bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* left;
    Node* right;
    Node(int val){
        data = val;
        left = right = NULL;
    }
};

pair<bool,int>isBalancedFast(Node* root){
    if(root == NULL)return{true,0};
    
    auto left = isBalancedFast(root->left);
    auto right = isBalancedFast(root->right);
    
    bool balanced = left.first && right.first && (abs(left.second - right.second)<= 1);
    int h = max(left.second,right.second) + 1;
    
    return{balanced, h};
}
bool isBalanced(Node* root){
    return isBalancedFast(root).first;
}
Node* buildSampleTreeBalanced(){
     Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->left = new Node(6);
    return root;
}
Node* buildSampleTreeUnbalanced(){
    Node* root = new Node(1);
    root -> left = new Node(2);
    root -> left = new Node(3);
    root -> left -> left = new Node(4);
    return root;
}
int main(){
    Node* balancedTree = buildSampleTreeBalanced();
    cout << "Is balancedTree balanced? : "
        << (isBalanced(balancedTree) ? "Yes" : "No") << endl;
        
    Node* unbalancedTree = buildSampleTreeUnbalanced();
    cout << "Is unbalancedTree balanced? : "  
        <<(isBalanced(unbalancedTree) ? "Yes" : "No") << endl;
        
    return 0;
}
